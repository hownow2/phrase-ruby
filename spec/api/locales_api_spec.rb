require 'spec_helper'
require 'json'

# Unit tests for Phrase::LocalesApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'LocalesApi' do
  before do
    # run before each test
    @api_instance = Phrase::LocalesApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of LocalesApi' do
    it 'should create an instance of LocalesApi' do
      expect(@api_instance).to be_instance_of(Phrase::LocalesApi)
    end
  end

  # unit tests for locale_create
  # Create a locale
  # Create a new locale.
  # @param project_id Project ID
  # @param locale_create 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_phrase_app_otp Two-Factor-Authentication token (optional)
  # @return [nil]
  describe 'locale_create test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for locale_delete
  # Delete a locale
  # Delete an existing locale.
  # @param project_id Project ID
  # @param id ID
  # @param locale_delete 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_phrase_app_otp Two-Factor-Authentication token (optional)
  # @return [nil]
  describe 'locale_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for locale_download
  # Download a locale
  # Download a locale in a specific file format.
  # @param project_id Project ID
  # @param id ID
  # @param locale_download 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_phrase_app_otp Two-Factor-Authentication token (optional)
  # @return [nil]
  describe 'locale_download test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for locale_show
  # Get a single locale
  # Get details on a single locale for a given project.
  # @param project_id Project ID
  # @param id ID
  # @param locale_show 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_phrase_app_otp Two-Factor-Authentication token (optional)
  # @return [Object]
  describe 'locale_show test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for locale_update
  # Update a locale
  # Update an existing locale.
  # @param project_id Project ID
  # @param id ID
  # @param locale_update 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_phrase_app_otp Two-Factor-Authentication token (optional)
  # @return [Object]
  describe 'locale_update test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for locales_list
  # List locales
  # List all locales for the given project.
  # @param project_id Project ID
  # @param locales_list 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_phrase_app_otp Two-Factor-Authentication token (optional)
  # @option opts [Integer] :page Page number
  # @option opts [Integer] :per_page allows you to specify a page size up to 100 items, 10 by default
  # @return [Array<Locale>]
  describe 'locales_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
